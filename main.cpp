/*
============================================================================

FileName    : main.cpp

Author      : JiHwan Lim

Version     : 1.0

Description : Test for each AES mode

============================================================================
*/
/*
* Test Vector for AES128-OFB mode
* 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
ㄴ Encryption Key
* 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
ㄴ Initialization vector
* 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
ㄴ Test vector
* 0x3b, 0x3f, 0xd9, 0x2e, 0xb7, 0x2d, 0xad, 0x20, 0x33, 0x34, 0x49, 0xf8, 0xe8, 0x3c, 0xfb, 0x4a
ㄴ Cipher text
*/

/*
* Test Vector for AEs128-CBC mode
* 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
ㄴ Encryption Key
* 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
ㄴ Invitialization vector
* 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
ㄴ Test vector
* 0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d
ㄴ Cipher text
*/

#include "AES_Header.h"

void print(u8* state, int len);
void AES_OFB_MODE();
void AES_CBC_MODE();

int main(int argc, char* argv[])
{
	AES_OFB_MODE();
	printf("\n\n--------------------------------------------------\n\n");
	AES_CBC_MODE();

	return 0;
}

void AES_OFB_MODE() {

	u8 input[] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
	u8 iv[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
	u8 key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };

	u8 enc[100] = { 0, };
	u8 temp[100] = { 0, };
	u8 dec[100] = { 0, };
	
	AESModeOfOperation OFB;
	OFB.set_key(key);
	OFB.set_mode(MODE_OFB);
	OFB.set_iv(iv);

	int olen = sizeof input;
	printf("\n\nPlainText (AES128-OFB mode)\n");
	printf("len = %d\n", olen);
	printf("<Plain Text>");
	print(input, olen);

	memcpy(temp, input, sizeof input);
	int len = OFB.Encrypt(temp, olen, enc);
	printf("\n\nEncrypt (AES128-OFB mode)\n");
	printf("len = %d\n", len);
	printf("<Encrypt Text>");
	print(enc, len);
	printf("\n\nDecrypt (AES128-OFB mode)\n");
	len = OFB.Decrypt(enc, len, dec);
	printf("len = %d\n", len);
	printf("<Decrypt Text>");
	print(dec, len);
}

void AES_CBC_MODE() {
	u8 input[] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
	u8 iv[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
	u8 key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };

	u8 enc[100] = { 0, };
	u8 temp[100] = { 0, };
	u8 dec[100] = { 0, };

	AESModeOfOperation CBC;
	CBC.set_key(key);
	CBC.set_mode(MODE_CBC);
	CBC.set_iv(iv);

	int clen = sizeof input;
	printf("\n\nPlainText (AES128-CBC mode)\n");
	printf("len = %d\n", clen);
	printf("<Plain Text>");
	print(input, clen);

	memcpy(temp, input, sizeof input);
	int len = CBC.Encrypt(temp, clen, enc);
	printf("\n\nEncrypt (AES128-CBC mode)\n");
	printf("len = %d\n", len);
	printf("<Encrypt Text>");
	print(enc, len);
	printf("\n\nDecrypt (AES128-CBC mode)\n");
	len = CBC.Decrypt(enc, len, dec);
	printf("len = %d\n", len);
	printf("<Decrypt Text>");
	print(dec, len);
}

void print(u8* state, int len)
{
	int i;
	for (i = 0; i<len; i++)
	{
		if (i % 16 == 0) printf("\n");
		printf("%x ", (int)(state[i] & 0xff));
	}
	printf("\n");
}
